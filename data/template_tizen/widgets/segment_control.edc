/*
 * efl-theme-tizen
 * Copyright (c) 2012-2013 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



//################################################################
//Segment Control
//################################################################

group { name: "elm/segment_control/base/default";
#define SEGMENT_TYPE_SINGLE 1
#define SEGMENT_TYPE_LEFT 2
#define SEGMENT_TYPE_MIDDLE 3
#define SEGMENT_TYPE_RIGHT 4
#define SEGMENT_STATE_NORMAL 1
#define SEGMENT_STATE_PRESSED 2
#define SEGMENT_STATE_SELECTED 3
#define SEGMENT_STATUS_ENABLED 0
#define SEGMENT_STATUS_DISABLED 1
   parts {
      part { name: "bg";
         type: RECT;
         mouse_events: 0;
         scale: 1;
         description {
            state: "default" 0.0;
            min: 100 40;
            visible: 0;
         }
      }
   }
}
group { name: "elm/segment_control/item/default";
   styles{
      style { name: "segment_control_multiline_style";
         base: "font=Tizen:style=Bold font_size="SEGMENT_CONTROL_MULTILINE_TEXT_SIZE_INC" align=center color=#ffffff wrap=char ellipsis=1.0 text_class=tizen";
         tag:  "br" "\n";
         tag:  "hilight" "+ font=Tizen:style=Bold";
         tag:  "b" "+ font=Tizen:style=Bold";
         tag:  "tab" "\t";
      }
   }
   images {
      image: "00_badge_bg.png" COMP;
   }
   parts {
      part { name: "base";
         mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "segment";
         type: RECT;
         mouse_events: 1;
         scale: 1;
         description { state: "default" 0.0;
            min: 1 1;
            visible: 0;
            rel1 {
               to: "base";
               relative: 0.0 0.0;
            }
            rel2 {
               to: "base";
               relative: 1.0 1.0;
            }
            color: 0 0 0 0;
         }
         description { state: "default_single" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "default_left" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "default_right" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "default_middle" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "pressed_single" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "pressed_left" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "pressed_right" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "pressed_middle" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "selected_single" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "selected_left" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "selected_right" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "selected_middle" 0.0;
            inherit: "default" 0.0;
         }
      }
      part { name: "seg_padding";
         type: RECT;
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            min: 0 0;
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               to: "segment";
               relative: 1.0 0.5;
            }
            rel2 {
               to: "segment";
               relative: 1.0 0.5;
            }
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            min: SEGMENT_CONTROL_DIVIDER_LINE_MIN_SIZE_INC;
            visible: 1;
         }
      }
      part { name: "divider_left";
         type: RECT;
         clip_to: "seg_padding";
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1 {
               to: "seg_padding";
               relative: 0.0 0.0;
            }
            rel2 {
               to: "seg_padding";
               relative: 0.5 1.0;
            }
            color: SEGMENT_CONTROL_DIVIDER_LEFT_COLOR_INC;
         }
      }
      part { name: "divider_right";
         type: RECT;
         clip_to: "seg_padding";
         mouse_events: 0;
         description { state: "default" 0.0;
            rel1 {
               to: "seg_padding";
               relative: 0.5 0.0;
            }
            rel2 {
               to: "seg_padding";
               relative: 1.0 1.0;
            }
            color: SEGMENT_CONTROL_DIVIDER_RIGHT_COLOR_INC;
         }
      }
      part { name: "left_text_padding";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            align: 0.0 0.5;
            min: SEGMENT_CONTROL_TEXT_PADDING_MIN_SIZE_INC;
            fixed: 1 0;
            rel1 {
               to: "segment";
               relative: 0.0 0.0;
            }
            rel2 {
               to: "segment";
               relative: 0.0 1.0;
            }
         }
      }
      part { name: "right_text_padding";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            min: SEGMENT_CONTROL_TEXT_PADDING_MIN_SIZE_INC;
            fixed: 1 0;
            align: 1.0 0.5;
            rel1 {
               to: "segment";
               relative: 1.0 0.0;
            }
            rel2 {
               to: "segment";
               relative: 1.0 1.0;
            }
         }
      }
      part { name: "icon.bg";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 0;
            rel1.to: "elm.swallow.icon";
            rel2.to: "elm.swallow.icon";
         }
      }
      part { name: "padding_icon_text";
         type: RECT;
         scale: 1;
         mouse_events: 0;
         description { state: "default" 0.0; //when only icon or no icon is there
            visible: 0;
            align: 0.0 0.0;
            rel1 {
               to: "icon.bg";
               relative: 1.0 0.0;
            }
            rel2 {
               to: "icon.bg";
               relative: 1.0 1.0;
            }
         }
         description { state: "icononly" 0.0;
            inherit: "default" 0.0;
         }
         description { state: "visible" 0.0; //when icon is visible
            inherit: "default" 0.0;
            rel2.offset: 2 0;
         }
      }
      part { name: "elm.swallow.icon";
         type: SWALLOW;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 0;
            rel1.to: "left_text_padding";
            rel1.relative: 1.0 0.0;
            rel2.to: "left_text_padding";
            rel2.relative: 1.0 1.0;
            aspect: 1.0 1.0;
            aspect_preference: BOTH;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            min: SEGMENT_CONTROL_VISIBLE_ICON_RECT_MIN_MAX_INC;
         }
         description { state: "icononly" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            min: SEGMENT_CONTROL_VISIBLE_ICON_RECT_MIN_MAX_INC;
            rel2.relative: 1.0 1.0;
         }
      }
      part { name: "elm.text";
         type: TEXTBLOCK;
         mouse_events: 0;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            max: 9999 84;
            rel1 {
               to_x: "padding_icon_text";
               to_y: "base";
               relative: 1.0 0.0;
            }
            rel2 {
               to: "right_text_padding";
               relative: 0.0 1.0;
            }
            color: SEGMENT_CONTROL_DEFAULT_ITEM_TEXT_COLOR_NORMAL_INC;
            text {
              style: "segment_control_multiline_style";
              min: 0 1;
              max: 0 1;
            }
         }
         description { state: "normal" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_PRESSED_INC;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_SELECTED_INC;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: SEGMENT_CONTROL_ITEM_TITLE_TEXT_COLOR_DISABLED_INC;
         }
      }
      part { name: "elm.text.badge.bg";
         mouse_events: 0;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            rel1 {
               to: "left.padding.text.badge";
               relative: 0.0 0.0;
            }
            rel2 {
               to: "right.padding.text.badge";
               relative: 1.0 1.0;
            }
            align: 1.0 0.5;
            image {
               normal: "00_badge_bg.png";
               border: 29 24 0 0;
               border_scale: 1;
            }
         }
         description { state: "normal" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "left.padding.text.badge";
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            min: SEGMENT_CONTROL_BADGE_TEXT_LEFT_PADDING_MIN_INC;
            rel1 {
               to: "elm.text.badge";
               relative: 0.0 0.0;
            }
            rel2 {
               to: "elm.text.badge";
               relative: 0.0 0.0;
            }
            align: 1.0 0.0;
         }
      }
      part { name: "right.padding.text.badge";
         type: RECT;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            min: SEGMENT_CONTROL_BADGE_TEXT_RIGHT_PADDING_MIN_INC;
            rel1 {
               to: "segment";
               relative: 1.0 0.0;
            }
            rel2 {
               to: "segment";
               relative: 1.0 0.0;
            }
            align: 1.0 0.0;
         }
      }
      part { name: "elm.text.badge";
         type: TEXT;
         mouse_events: 0;
         scale: 1;
         description {
            state: "default" 0.0;
            visible: 0;
            min: 1 1;
            rel1 {
               to: "segment";
               relative: 0.2 0.0; // rel_x is given 0.2, so bg image will not cross the segment image in left dir.
            }
            rel2 {
               to: "right.padding.text.badge";
               relative: 0.0 1.0;
            }
            align: 1.0 0.5;
            color: SEGMENT_CONTROL_BADGE_TEXT_COLOR_INC;
            text {
               font: "Tizen:style=Bold";
               size: SEGMENT_CONTROL_BADGE_TEXT_FONT_SIZE_INC;
               min: 1 1;
               max: 1 0;
            }
         }
         description { state: "normal" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part { name: "disabler";
         type: RECT;
         repeat_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            visible: 0;
            fixed: 1 1;
            min: 1 1;
            align: 0.0 0.5;
            rel1 {
               relative: 0.0 0.0;
               to: "segment";
            }
            rel2 {
               relative: 1.0 1.0;
               to: "segment";
            }
            color: 255 255 255 150;
         }
         description { state: "disabled_single" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled_left" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled_right" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "disabled_middle" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      script {
         public seg_type; // Single, Left, Middle, Right.
         public seg_state; // Normal/Default, Pressed, Selected.
         public seg_status;// Enabled/Default, Disabled

         public update_state() {
            new type, state, disabled;
            type = get_int(seg_type);
            state = get_int(seg_state);
            disabled = get_int(seg_status);

            if(state == SEGMENT_STATE_NORMAL)
              {
                 if(type == SEGMENT_TYPE_SINGLE)
                   {
                      set_state(PART:"segment", "default_single", 0.0);
                      set_state(PART:"seg_padding", "default", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_LEFT)
                   {
                      set_state(PART:"segment", "default_left", 0.0);
                      set_state(PART:"seg_padding", "visible", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_MIDDLE)
                   {
                      set_state(PART:"segment", "default_middle", 0.0);
                      set_state(PART:"seg_padding", "visible", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_RIGHT)
                   {
                      set_state(PART:"segment", "default_right", 0.0);
                      set_state(PART:"seg_padding", "default", 0.0);
                   }
                 set_state(PART:"elm.text", "normal", 0.0);
              }
            else if(state == SEGMENT_STATE_PRESSED)
              {
                 if(type == SEGMENT_TYPE_SINGLE)
                   {
                      set_state(PART:"segment", "pressed_single", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_LEFT)
                   {
                      set_state(PART:"segment", "pressed_left", 0.0);
                      set_state(PART:"seg_padding", "visible", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_MIDDLE)
                   {
                      set_state(PART:"segment", "pressed_middle", 0.0);
                      set_state(PART:"seg_padding", "visible", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_RIGHT)
                   {
                      set_state(PART:"segment", "pressed_right", 0.0);
                      set_state(PART:"seg_padding", "default", 0.0);
                   }
                 set_state(PART:"elm.text", "pressed", 0.0);
              }
            else if(state == SEGMENT_STATE_SELECTED)
              {
                 if(type == SEGMENT_TYPE_SINGLE)
                   {
                      set_state(PART:"segment", "selected_single", 0.0);
                      set_state(PART:"seg_padding", "default", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_LEFT)
                   {
                      set_state(PART:"segment", "selected_left", 0.0);
                      set_state(PART:"seg_padding", "visible", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_MIDDLE)
                   {
                      set_state(PART:"segment", "selected_middle", 0.0);
                      set_state(PART:"seg_padding", "visible", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_RIGHT)
                   {
                      set_state(PART:"segment", "selected_right", 0.0);
                      set_state(PART:"seg_padding", "default", 0.0);
                   }
                 set_state(PART:"elm.text", "selected", 0.0);
              }
            if(disabled == SEGMENT_STATUS_DISABLED)
              {
                 if(type == SEGMENT_TYPE_SINGLE)
                   {
                       set_state(PART:"disabler", "disabled_single", 0.0);
                      set_state(PART:"seg_padding", "default", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_LEFT)
                   {
                      set_state(PART:"disabler", "disabled_left", 0.0);
                      set_state(PART:"seg_padding", "visible", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_MIDDLE)
                   {
                      set_state(PART:"disabler", "disabled_middle", 0.0);
                      set_state(PART:"seg_padding", "visible", 0.0);
                   }
                 else if(type == SEGMENT_TYPE_RIGHT)
                   {
                      set_state(PART:"disabler", "disabled_right", 0.0);
                      set_state(PART:"seg_padding", "default", 0.0);
                   }
                 set_state(PART:"elm.text", "disabled", 0.0);
              }
            else
              {
                 set_state(PART:"disabler", "default", 0.0);
              }
         }
      }
      program {
         name: "segment_type_s";
         signal: "elm,type,segment,single";
         source: "elm";
         script {
            set_int(seg_type, SEGMENT_TYPE_SINGLE);
            update_state();
         }
      }
      program {
         name: "segment_type_l";
         signal: "elm,type,segment,left";
         source: "elm";
         script {
            set_int(seg_type, SEGMENT_TYPE_LEFT);
            update_state();
         }
      }
      program {
         name: "segment_type_m";
         signal: "elm,type,segment,middle";
         source: "elm";
         script {
            set_int(seg_type, SEGMENT_TYPE_MIDDLE);
            update_state();
         }
      }
      program {
         name: "segment_type_r";
         signal: "elm,type,segment,right";
         source: "elm";
         script {
            set_int(seg_type, SEGMENT_TYPE_RIGHT);
            update_state();
         }
      }
      program {
         name: "normal_segment";
         signal: "elm,state,segment,normal";
         source: "elm";
         script {
            set_int(seg_state, SEGMENT_STATE_NORMAL);
            update_state();
         }
      }
      program {
         name: "pressed_segment";
         signal: "elm,state,segment,pressed";
         source: "elm";
         script {
            set_int(seg_state, SEGMENT_STATE_PRESSED);
            update_state();
         }
      }
      program {
         name: "selected_segment";
         signal: "elm,state,segment,selected";
         source: "elm";
         script {
            set_int(seg_state, SEGMENT_STATE_SELECTED);
            update_state();
         }
      }
      program { name: "disable_segment";
         signal: "elm,state,disabled";
         source: "elm";
         script {
            set_int(seg_status, SEGMENT_STATUS_DISABLED);
            update_state();
         }
      }
      program { name: "enable_segment";
         signal: "elm,state,enabled";
         source: "elm";
         script {
            set_int(seg_status, SEGMENT_STATUS_ENABLED);
            update_state();
         }
      }
      program { name: "text_show";
         signal: "elm,state,text,visible";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.swallow.icon", st, 30, vl);
            if (!strcmp(st, "icononly"))
              {
                 set_state(PART:"elm.swallow.icon", "visible", 0.0);
                 set_state(PART:"padding_icon_text", "visible", 0.0);
              }
            get_state(PART:"elm.text", st, 30, vl);
            if (!strcmp(st, "selected"))
               set_state(PART:"elm.text", "selected", 0.0);
            else
               set_state(PART:"elm.text", "normal", 0.0);
         }
      }
      program { name: "text_hide";
         signal: "elm,state,text,hidden";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.swallow.icon", st, 30, vl);
            if (!strcmp(st, "visible"))
              {
                 set_state(PART:"elm.swallow.icon", "icononly", 0.0);
                 set_state(PART:"padding_icon_text", "icononly", 0.0);
              }
            set_state(PART:"elm.text", "default", 0.0);
         }
      }
      program { name: "badge_text_show";
         signal: "elm,state,elm.text.badge,visible";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text.badge", st, 30, vl);
            if (!strcmp(st, "selected"))
            {
               set_state(PART:"elm.text.badge", "selected", 0.0);
               set_state(PART:"elm.text.badge.bg", "selected", 0.0);
            }
            else
            {
               set_state(PART:"elm.text.badge", "normal", 0.0);
               set_state(PART:"elm.text.badge.bg", "normal", 0.0);
            }
         }
      }
      program { name: "badge_text_hide";
         signal: "elm,state,elm.text.badge,hidden";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "elm.text.badge";
         target: "elm.text.badge.bg";
      }
      program { name: "icon_show";
         signal: "elm,state,icon,visible";
         source: "elm";
         script {
            new st[31];
            new Float:vl;
            get_state(PART:"elm.text", st, 30, vl);
            if ((!strcmp(st, "normal")) || (!strcmp(st, "selected")))
              {
                 set_state(PART:"elm.swallow.icon", "visible", 0.0);
                 set_state(PART:"padding_icon_text", "visible", 0.0);
              }
            else
              {
                 set_state(PART:"elm.swallow.icon", "icononly", 0.0);
                 set_state(PART:"padding_icon_text", "icononly", 0.0);
              }
         }
      }
      program { name: "icon_hide";
         signal: "elm,state,icon,hidden";
         source: "elm";
         action:  STATE_SET "default" 0.0;
         target: "elm.swallow.icon";
      }
   }
#undef SEGMENT_TYPE_SINGLE
#undef SEGMENT_TYPE_LEFT
#undef SEGMENT_TYPE_MIDDLE
#undef SEGMENT_TYPE_RIGHT
#undef SEGMENT_STATE_NORMAL
#undef SEGMENT_STATE_PRESSED
#undef SEGMENT_STATE_SELECTED
#undef SEGMENT_STATUS_ENABLED
#undef SEGMENT_STATUS_DISABLED
}
