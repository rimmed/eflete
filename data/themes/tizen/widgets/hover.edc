group { name: "elm/hover/base/hoversel_vertical/default";
   alias: "elm/hover/base/hoversel_vertical/entry";
   data.item: "dismiss" "on";
   // max_size limits the maximum size of expanded hoversel
   // when it's scrollable.
   //data.item: "max_size" "60";
   images.image: "POP UP/popup_shadow.png" COMP;
   script {
      public visible = 0;
      public right = 0;
      public on_dismiss = 0;
      public topshow2() {
         if (get_int(right) == 0)
            run_program(PROGRAM:"topshow_default");
         else
            run_program(PROGRAM:"topshow_right");
         set_int(visible, 1);
         set_int(on_dismiss, 0);
      }
      public bottomshow2() {
         if (get_int(right) == 0)
            run_program(PROGRAM:"bottomshow_default");
         else
            run_program(PROGRAM:"bottomshow_right");
         set_int(visible, 1);
         set_int(on_dismiss, 0);
      }
   }
   parts {
      part { name: "elm.swallow.offset"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            fixed: 1 1;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 0.0;
         }
      }
      part { name: "elm.swallow.size"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            fixed: 1 1;
            rel1.to: "elm.swallow.offset";
            rel1.relative: 1.0 1.0;
            rel2.to: "elm.swallow.offset";
            rel2.relative: 1.0 1.0;
         }
      }
      part { name: "shadow";
         type: IMAGE;
         description {state: "default" 0.0;
            rel1.to: "button_image";
            rel2.to: "button_image";
            rel1.offset: -7 7;
            rel2.offset: 9 9;
            image {
               normal: "POP UP/popup_shadow.png";
               border: 20 20 20 20;
            }
         }
      }
      part { name: "button_image"; mouse_events: 1;
         type: RECT;
         description { state: "default" 0.0;
            min: 86 0;
            rel1.to_x: "limit0";
            rel1.to_y: "elm.swallow.slot.top";
            rel1.offset: 0 -1;
            rel2.to_x: "limit1";
            rel2.to_y: "elm.swallow.slot.middle";
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 0;
            color_class: scrollbar_line_sel;
         }
         description { state: "bottom" 0.0;
            rel1.to_x: "limit0";
            min: 86 0;
            rel1.to_y: "elm.swallow.slot.middle";
            rel1.relative: 0.0 1.0;
            rel1.offset: 0 -1;
            rel2.to_x: "limit1";
            rel2.to_y: "elm.swallow.slot.bottom";
            rel2.offset: -1 0;
            color_class: scrollbar_line_sel;
         }
      }
      part { name: "limit0"; type: SPACER;
         description { state: "default" 0.0;
            rel1.to_x: "elm.swallow.slot.top";
            rel1.offset: 1 0;
            rel2.to_x: "elm.swallow.slot.middle";
            rel2.offset: 0 0;
            rel2.relative: 0.0 1.0;
            align: 0.0 0.5;
            min: 1 1;
            max: 1 99999;
         }
         description { state: "bottom" 0.0;
            inherit: "default" 0.0;
            rel1.to_x: "elm.swallow.slot.bottom";
         }
      }
      part { name: "limit1"; type: SPACER;
         description { state: "default" 0.0;
            rel1.to_x: "elm.swallow.slot.middle";
            rel1.offset: -1 0;
            rel1.relative: 1.0 0.0;
            rel2.to_x: "elm.swallow.slot.top";
            rel2.offset: -2 0;
            align: 1.0 0.5;
            min: 1 1;
            max: 1 99999;
         }
         description { state: "bottom" 0.0;
            inherit: "default" 0.0;
            rel2.to_x: "elm.swallow.slot.bottom";
         }
      }
     part { name: "base"; type: RECT;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            color: 0 0 0 0;
         }
      }
      part { name: "topclip"; type: RECT;
         description { state: "default" 0.0;
            rel2.to_y: "button_image";
         }
      }
      part { name: "elm.swallow.slot.top"; type: SWALLOW;
         clip_to: "topclip";
         description { state: "default" 0.0;
            visible: 1;
            align: 0.0 0.0;
            fixed: 0 1;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 0.0 0.0;
            rel1.offset: 0 -1;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 1.0 0.0;
            /* set negative offset along x axis not to make
               "select_line" part exceed parent's width */
            rel2.offset: -9 -1;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            align: 0.0 1.0;
         }
         description { state: "right" 0.0;
            inherit: "default" 0.0;
            align: 1.0 0.0;
            rel2.offset: -9 0;
         }
         description { state: "right_visible" 0.0;
            inherit: "default" 0.0;
            align: 1.0 1.0;
            rel2.offset: -9 0;
         }
      }
      part { name: "bottomclip"; type: RECT;
         description { state: "default" 0.0;
            rel1.to_y: "button_image";
         }
      }
      part { name: "elm.swallow.slot.bottom"; type: SWALLOW;
         clip_to: "bottomclip";
         description { state: "default" 0.0;
            align: 0.0 1.0;
            fixed: 0 1;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 0.0 1.0;
            rel1.offset: 0 0;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 1.0 1.0;
            /* set negative offset along x axis not to make
               "select_line" part exceed parent's width */
            rel2.offset: -9 -1;
         }
         description { state: "visible" 0.0;
            inherit: "default" 0.0;
            align: 0.0 0.0;
         }
         description { state: "right" 0.0;
            inherit: "default" 0.0;
            align: 1.0 1.0;
            rel2.offset: -9 0;
         }
         description { state: "right_visible" 0.0;
            inherit: "default" 0.0;
            align: 1.0 0.0;
            rel2.offset: -9 0;
         }
      }
      part { name: "elm.swallow.slot.middle";
         type: SWALLOW;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.size";
            rel2.to: "elm.swallow.size";
         }
      }
   }
   programs {
      program { name: "end";
         signal: "mouse,up,*"; source: "base";
         script {
            if (get_int(on_dismiss) == 0) {
               emit("elm,action,dismiss", "elm");
               set_int(on_dismiss, 1);
            }
         }
      }
      program { name: "show";
         signal: "elm,action,show"; source: "elm";
         action: STATE_SET "visible" 0.0;
         target: "base";
      }
      program { name: "hide";
         signal: "elm,action,hide"; source: "elm";
         action: STATE_SET "default" 0.0;
         transition: LINEAR 0.2;
         target: "base";
         after: "hidefinished";
      }
      program { name: "hide_no_animate";
         signal: "elm,action,hide,no_animate"; source: "elm";
         action: STATE_SET "default" 0.0;
         target: "base";
         after: "hidefinished";
      }
      program { name: "hidefinished";
         script {
            set_int(on_dismiss, 0);
            emit("elm,action,hide,finished", "elm");
         }
      }
      program { name: "topshow";
         signal: "elm,action,slot,top,show"; source: "elm";
         script {
            set_state(PART:"limit0", "default", 0.0);
            set_state(PART:"limit1", "default", 0.0);
            set_state(PART:"button_image", "default", 0.0);
            topshow2();
         }
      }
      program { name: "topshow_default";
         action: STATE_SET "visible" 0.0;
         target: "elm.swallow.slot.top";
         transition: LINEAR 0.1;
      }
      program { name: "topshow_right";
         action: STATE_SET "right_visible" 0.0;
         target: "elm.swallow.slot.top";
         transition: LINEAR 0.1;
      }
      program { name: "tophide";
         signal: "elm,action,slot,top,hide";
         source: "elm";
         script {
            if (get_int(right) == 0)
               run_program(PROGRAM:"tophide_default");
            else
               run_program(PROGRAM:"tophide_right");
            set_int(visible, 0);
         }
      }
      program { name: "tophide_default";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.slot.top";
         transition: LINEAR 0.1;
      }
      program { name: "tophide_right";
         action: STATE_SET "right" 0.0;
         target: "elm.swallow.slot.top";
         transition: LINEAR 0.1;
      }
      program { name: "bottomshow";
         signal: "elm,action,slot,bottom,show"; source: "elm";
         script {
            set_state(PART:"limit0", "bottom", 0.0);
            set_state(PART:"limit1", "bottom", 0.0);
            set_state(PART:"button_image", "bottom", 0.0);
            bottomshow2();
         }
      }
      program { name: "bottomshow_default";
         action: STATE_SET "visible" 0.0;
         target: "elm.swallow.slot.bottom";
         transition: LINEAR 0.1;
      }
      program { name: "bottomshow_right";
         action: STATE_SET "right_visible" 0.0;
         target: "elm.swallow.slot.bottom";
         transition: LINEAR 0.1;
      }
      program { name: "bottomhide";
         signal: "elm,action,slot,bottom,hide"; source: "elm";
         script {
            if (get_int(right) == 0) {
               run_program(PROGRAM:"bottomhide_default");
            }
            else {
               run_program(PROGRAM:"bottomhide_right");
            }
            set_int(visible, 0);
         }
      }
      program { name: "bottomhide_default";
         action: STATE_SET "default" 0.0;
         target: "elm.swallow.slot.bottom";
         transition: LINEAR 0.1;
      }
      program { name: "bottomhide_right";
         action: STATE_SET "right" 0.0;
         target: "elm.swallow.slot.bottom";
         transition: LINEAR 0.1;
      }
      program { name: "align_right";
         signal: "elm,state,align,right"; source: "elm";
         script {
            set_int(right, 1);
            if (get_int(visible) == 0) {
               set_state(PART:"elm.swallow.slot.top", "right", 0.0);
               set_state(PART:"elm.swallow.slot.bottom", "right", 0.0);
            }
            else {
               set_state(PART:"elm.swallow.slot.top", "right_visible", 0.0);
               set_state(PART:"elm.swallow.slot.bottom", "right_visible", 0.0);
            }
         }
      }
      program { name: "align_default";
         signal: "elm,state,align,default"; source: "elm";
         script {
            set_int(right, 0);
            if (get_int(visible) == 0) {
               set_state(PART:"elm.swallow.slot.top", "default", 0.0);
               set_state(PART:"elm.swallow.slot.bottom", "default", 0.0);
            }
            else {
               set_state(PART:"elm.swallow.slot.top", "visible", 0.0);
               set_state(PART:"elm.swallow.slot.bottom", "visible", 0.0);
            }
         }
      }
   }
}
group { name: "elm/hover/base/default";
   data.item: "dismiss" "on";
   script {
      public on_dismiss = 0;
   }
   parts {
      part { name: "elm.swallow.offset"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            rel1.relative: 0.0 0.0;
            rel2.relative: 0.0 0.0;
            fixed: 1 1;
         }
      }
      part { name: "elm.swallow.size"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            rel1.to: "elm.swallow.offset";
            rel1.relative: 1.0 1.0;
            rel2.to: "elm.swallow.offset";
            rel2.relative: 1.0 1.0;
            fixed: 1 1;
         }
      }
      part { name: "base"; type: RECT; mouse_events: 1;
         description { state: "default" 0.0;
            color: 0 0 0 64;
         }
      }
      part { name: "box"; type: RECT; mouse_events: 0;
         description { state: "default" 0.0;
            color: 0 0 0 0;
            rel1.to: "elm.swallow.size";
            //rel1.offset: -2 -2;
            rel2.to: "elm.swallow.size";
            //rel2.offset: 1 1;
         }
      }
      part { name: "elm.swallow.slot.left"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 1.0 0.5;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 0.0 0.0;
            rel1.offset: -1 0;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 0.0 1.0;
            rel2.offset: -1 -1;
            fixed: 1 0;
         }
      }
      part { name: "elm.swallow.slot.top-left"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 1.0 1.0;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 0.0 0.0;
            rel1.offset: 0 0;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 0.0 0.0;
            rel2.offset: -1 -1;
            fixed: 1 1;
         }
      }
      part { name: "elm.swallow.slot.top"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.5 1.0;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 0.0 0.0;
            rel1.offset: 0 -1;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 -1;
            fixed: 0 1;
         }
      }
      part { name: "elm.swallow.slot.top-right"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.0 1.0;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 1.0 0.0;
            rel1.offset: 0 0;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 1.0 0.0;
            rel2.offset: -1 -1;
            fixed: 1 1;
         }
      }
      part { name: "elm.swallow.slot.right"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.0 0.5;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 1.0 0.0;
            rel1.offset: 0 0;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 1.0 1.0;
            rel2.offset: 0 -1;
            fixed: 1 0;
         }
      }
      part { name: "elm.swallow.slot.bottom-right"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.0 0.0;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 1.0 1.0;
            rel1.offset: 0 0;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 1.0 1.0;
            rel2.offset: -1 -1;
            fixed: 1 1;
         }
      }
      part { name: "elm.swallow.slot.bottom"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.5 0.0;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 0.0 1.0;
            rel1.offset: 0 0;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 1.0 1.0;
            rel2.offset: -1 0;
            fixed: 0 1;
         }
      }
      part { name: "elm.swallow.slot.bottom-left"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 1.0 0.0;
            rel1.to: "elm.swallow.slot.middle";
            rel1.relative: 0.0 1.0;
            rel1.offset: 0 0;
            rel2.to: "elm.swallow.slot.middle";
            rel2.relative: 0.0 1.0;
            rel2.offset: -1 0;
            fixed: 1 1;
         }
      }
      part { name: "elm.swallow.slot.middle"; type: SWALLOW;
         description { state: "default" 0.0;
            rel1.to: "elm.swallow.size";
            rel2.to: "elm.swallow.size";
         }
      }
   }
   programs {
      program { name: "end";
         signal: "mouse,up,*"; source: "base";
         script {
            if (get_int(on_dismiss) == 0) {
               emit("elm,action,dismiss", "elm");
               set_int(on_dismiss, 1);
            }
         }
      }
      program { name: "hide";
         signal: "elm,action,hide"; source: "elm";
         after: "hidefinished";
      }
      program { name: "hidefinished";
         script {
            set_int(on_dismiss, 0);
            emit("elm,action,hide,finished", "elm");
         }
      }
   }
}
